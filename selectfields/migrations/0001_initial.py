# Generated by Django 3.1.7 on 2021-04-01 23:08

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccelerationFactorForPitting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('CR ≥ 0.5mm (0.020 in.) /year - Score=1.15', 'CR ≥ 0.5mm (0.020 in.) /year'), ('0.3 mm (0.013 in.) ≤ CR < 0.5mm (0.020 in.) /year - Score=1.1', '0.3 mm (0.013 in.) ≤ CR < 0.5mm (0.020 in.) /year'), ('0.1 mm (0.004 in.) ≤ CR < 0.3mm (0.013 in.) /year - Score=1.05', '0.1 mm (0.004 in.) ≤ CR < 0.3mm (0.013 in.) /year'), ('CR < 0.1mm (0.004 in.)/year - Score=1.0', 'CR < 0.1mm (0.004 in.)/year')], default='1.15', max_length=100, verbose_name='24. Acceleration factor for pitting')),
            ],
            options={
                'verbose_name': 'Acceleration Factor For Pitting',
                'verbose_name_plural': 'Acceleration Factor For Pitting',
            },
        ),
        migrations.CreateModel(
            name='BottomPlatesExternalCoating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('External coating applied and quality is sound - Score=0', 'External coating applied and quality is sound'), ('External coating applied but quality is poor - Score=1', 'External coating applied but quality is poor'), ('Not existing - Score=2', 'Not existing')], default='Internal coating applied and quality is sound - Score=0', max_length=100, verbose_name='4: Bottom plates internal coating (other than shop primer)')),
            ],
        ),
        migrations.CreateModel(
            name='BottomPlatesInternalCoatingLining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Internal coating applied and quality is sound - Score=0', 'Internal coating applied and quality is sound'), ('Internal coating applied but quality is poor - Score=1', 'Internal coating applied but quality is poor'), ('Not existing - Score=2', 'Not existing')], default='Internal coating applied and quality is sound - Score=0', max_length=100, verbose_name='3: Bottom plates internal coating or lining')),
            ],
        ),
        migrations.CreateModel(
            name='CostOfRepair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Negligible or less than 5% of capital cost - Score=1', 'Negligible or less than 5% of capital cost'), ('5-10% of capital cost - Score=2', '5-10% of capital cost'), ('10-50% of capital cost - Score=3', '10-50% of capital cost'), ('>50% of capital cost (new tank) - Score=4', '>50% of capital cost (new tank)')], default='Negligible or less than 5% of capital cost - Score=1', max_length=100, verbose_name='10b: Cost of repair')),
            ],
            options={
                'verbose_name': 'Cost Of Repair',
                'verbose_name_plural': 'Cost Of Repair',
            },
        ),
        migrations.CreateModel(
            name='EffectivenessOfDrainage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Slope of tank pad shoulder allows for adequate drainage away from tank bottom - Score=0', 'Slope of tank pad shoulder allows for adequate drainage away from tank bottom'), ('Water will remain under the tank bottom due to inadequate drainage or tank bottom is standing in water - Score=2', 'Water will remain under the tank bottom due to inadequate drainage or tank bottom is standing in water')], default='Slope of tank pad shoulder allows for adequate drainage away from tank bottom - Score=0', max_length=150, verbose_name='9: Effectiveness of drainage')),
            ],
            options={
                'verbose_name': 'Effectiveness Of Drainage',
                'verbose_name_plural': 'Effectiveness Of Drainage',
            },
        ),
        migrations.CreateModel(
            name='EnvironmetalHazardToSoilAndWater',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Nor or negligle environment effect - Score=1', 'Nor or negligle environment effect'), ('Environmental nuisance affecting neighbourhood - Score=2', 'Environmental nuisance affecting neighbourhood'), ('Environmental pollution/Extensive restoration required - Score=3', 'Environmental pollution/Extensive restoration required'), ('Severe demage/nuisance/pollution over large area- Score=4', 'Severe demage/nuisance/pollution over large area')], default='Nor or negligle environment effect - Score=1', max_length=100, verbose_name='14a: Environmetal hazard to soil and water as the potential to cause')),
            ],
            options={
                'verbose_name': 'Environmetal Hazard To Soil And Water',
                'verbose_name_plural': 'Environmetal Hazard To Soil And Water',
            },
        ),
        migrations.CreateModel(
            name='FoundationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Piled concrete raft - Score=0', 'Piled concrete raft'), ('Concrete raft under tank - Score=0', 'Concrete raft under tank'), ('Sand pad with annular ring of coarse granular material + sound sand-bitumen top layer - Score=2/3', 'Sand pad with annular ring of coarse granular material + sound sand-bitumen top layer'), ('Sand pad with annular ring of coarse granular material - Score=4/3', 'Sand pad with annular ring of coarse granular material'), ('Traditional granular soil/sand type - Score=2', 'Traditional granular soil/sand type')], default='Piled concrete raft - Score=0', max_length=100, verbose_name='7: Foundation type')),
            ],
            options={
                'verbose_name': 'Foundation Type',
                'verbose_name_plural': 'Foundation Type',
            },
        ),
        migrations.CreateModel(
            name='FrequencyOfInternalInspections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Multiple inspections carried out - Score=0.1', 'Multiple inspections carried out'), ('No or minimal inspection data available - Score=0', 'No or minimal inspection data available')], default='Multiple inspections carried out - Score=0.1', max_length=100, verbose_name='29: Frequency of internal inspections performed during service life')),
            ],
            options={
                'verbose_name': 'Frequency Of Internal Inspections',
                'verbose_name_plural': 'Frequency Of Internal Inspections',
            },
        ),
        migrations.CreateModel(
            name='HeatingCoilsInTank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('No heating coil or no contact between heating coil and bottom plates - Score=0', 'No heating coil or no contact between heating coil and bottom plates'), ('Presence of heating coil in direct contact with bottom plates - Score=1', 'Presence of heating coil in direct contact with bottom plates')], default='No heating coil or no contact between heating coil and bottom plates - Score=0', max_length=100, verbose_name='5c: Heating coils in tank')),
            ],
            options={
                'verbose_name': 'Heating Coils In Tank',
                'verbose_name_plural': 'Heating Coils In Tank',
            },
        ),
        migrations.CreateModel(
            name='HeightOfFoundation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Tank bottom free from contact with water - Score=0', 'Tank bottom free from contact with water'), ('Tank bottom in contact with water - Score=2', 'Tank bottom in contact with water')], default='Tank bottom free from contact with water - Score=0', max_length=100, verbose_name='8: Height of foundation')),
            ],
            options={
                'verbose_name': 'Height Of Foundation',
                'verbose_name_plural': 'Height Of Foundation',
            },
        ),
        migrations.CreateModel(
            name='ImpressCathodicProtection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('All readings around the periphery > 0.85 V - Score=0', 'All readings around the periphery > 0.85 V'), ('0.6 V < All readings around the periphery < 0.85 V - Score=1', '0.6 V < All readings around the periphery < 0.85 V'), ('All readings around periphery < 0.6 V or none installed - Score=2', 'All readings around periphery < 0.6 V or none installed')], default='All readings around the periphery > 0.85 V - Score=0', max_length=100, verbose_name='1: Impressed cathodic protection')),
            ],
        ),
        migrations.CreateModel(
            name='LikelihoodOfInjuryToPersonnel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('No injury or near miss - Score=1', 'No injury or near miss'), ('Minor injury - Score=2', 'Minor injury'), ('Lost time injury/Medical treatment - Score=3', 'Lost time injury/Medical treatment'), ('Seriuos injury/fatality on site - Score=4', 'Seriuos injury/fatality on site')], default='No injury or near miss - Score=1', max_length=100, verbose_name='12a: Likelihood of injury to personnel')),
            ],
            options={
                'verbose_name': 'Likelihood Of Injury To Personnel',
                'verbose_name_plural': 'Likelihood Of Injury To Personnel',
            },
        ),
        migrations.CreateModel(
            name='LocationOfTankFarm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Tank farm within an abandonned area - Score=1', 'Tank farm within an abandonned area'), ('Flat tank farm - Score=2', 'Flat tank farm'), ('Sloping tank farm - Score=3', 'Sloping tank farm'), ('In plant area within populous area - Score=4', 'In plant area within populous area')], default='Tank farm within an abandonned area - Score=1', max_length=100, verbose_name='12d: Location of tank farm')),
            ],
            options={
                'verbose_name': 'Location Of Tank Farm',
                'verbose_name_plural': 'Location Of Tank Farm',
            },
        ),
        migrations.CreateModel(
            name='NDTMethodUsedForThicknessMeasurements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Floor scan + US - Score=-0.1', 'Floor scan + US'), ('US on gridline system - Score=0', 'US on gridline system'), ('Visual + Spot ultrasonic (US) - Score=0.1)', 'Visual + Spot ultrasonic (US)')], default='Floor scan + US - Score=-0.1', max_length=100, verbose_name='28: NDT method used for thickness measurements')),
            ],
            options={
                'verbose_name': 'NDT Method Used For Thickness Measurements',
                'verbose_name_plural': 'NDT Method Used For Thickness Measurements',
            },
        ),
        migrations.CreateModel(
            name='ProbableMagnitudeOfProductLoss',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('No release of product - Score=1', 'No release of product'), ('<5% of tank contents - Score=2', '<5% of tank contents'), ('>5% of tank contents - Score=3', '>5% of tank contents')], default='No release of product - Score=1', max_length=100, verbose_name='10c: Probable magnitude of product loss')),
            ],
            options={
                'verbose_name': 'Probable Magnitude Of ProductLoss',
                'verbose_name_plural': 'Probable Magnitude Of Product Loss',
            },
        ),
        migrations.CreateModel(
            name='ProductCorrosivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Group 1/Risk H - Score=2', 'Group 1/Risk H'), ('Group 3/Risk M - Score=1', 'Group 3/Risk M'), ('Group 4/Risk L - Score=0', 'Group 4/Risk L'), ('Group 5/Risk L - Score=0', 'Group 5/Risk L'), ('Group 6/Risk M - Score=1', 'Group 6/Risk M')], default='Group 1/Risk H - Score=2', max_length=100, verbose_name='6: Product Corrosivity')),
            ],
            options={
                'verbose_name': 'Product Corrosivity',
                'verbose_name_plural': 'Product Corrosivity',
            },
        ),
        migrations.CreateModel(
            name='ProductFlammabilityAsPerMCSP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Class III(1) and unclassified product - Score=1', 'Class III(1) and unclassified product'), ('Class II(1) product - Score=2', 'Class II(1) product'), ('Class II(2) and III(2) product - Score=3', 'Class II(2) and III(2) product'), ('Class I product - Score=4', 'Class I product')], default='Class III(1) and unclassified product - Score=1', max_length=100, verbose_name='12b: Product flammability as per MCSP')),
            ],
            options={
                'verbose_name': 'Product Flammability As Per MCSP',
                'verbose_name_plural': 'Product Flammability As Per MCSP',
            },
        ),
        migrations.CreateModel(
            name='ProductToxicity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Non-toxic substances- Score=1', 'Non-toxic substances'), ('Toxic substance if in contact with other substances - Score=2', 'Toxic substance if in contact with other substances'), ('Toxic substance - Score=3', 'Toxic substance'), ('Extremely toxic substance - Score=4', 'Extremely toxic substance')], default='Non-toxic substances- Score=1', max_length=100, verbose_name='12c: Product toxicity')),
            ],
            options={
                'verbose_name': 'Product Toxicity',
                'verbose_name_plural': 'Product Toxicity',
            },
        ),
        migrations.CreateModel(
            name='SacrificialCathodicPropection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Sacrificial CP available and operating - Score=0', 'Sacrificial CP available and operating'), ('Sacrificial CP not applicable - Score=0', 'Sacrificial CP not applicable'), ('Sacrificial CP not available and not operating - Score=2', 'Sacrificial CP not available and not operating')], default='Sacrificial CP available and operating - Score=0', max_length=100, verbose_name='1: Impressed cathodic protection')),
            ],
        ),
        migrations.CreateModel(
            name='StorageConditions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Temperature of product < 40°C - Score=0', 'Temperature of product < 40°C'), ('40°C Temperature of product < 85°C - Score=1', '40°C Temperature of product < 85°C'), ('Temperature of product > 85°C - Score=2', 'Temperature of product > 85°C')], default='Temperature of product < 40°C - Score=0', max_length=100, verbose_name='5a: Type of bottom')),
            ],
            options={
                'verbose_name': 'Storage Condition',
                'verbose_name_plural': 'Storage Conditions',
            },
        ),
        migrations.CreateModel(
            name='TimeToRepair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('No internal entry required limited repair, no limitation on repair time - Score=1', 'No internal entry required limited repair, no limitation on repair time'), ('Internal entry required, major repair (<3 months) - Score=2', 'Internal entry required, major repair (<3 months)'), ('Internal entry required, major repair (3-8 months)- Score=3', 'Internal entry required, major repair (3-8 months)'), ('Internal entry required, limited repair (>8 months)- Score=4', 'Internal entry required, limited repair (>8 months)')], default='No internal entry required limited repair, no limitation on repair time - Score=1', max_length=100, verbose_name='10a: Time to repair')),
            ],
            options={
                'verbose_name': 'Time To Repair',
                'verbose_name_plural': 'Time To Repair',
            },
        ),
        migrations.CreateModel(
            name='TypeOfBottom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Cone up - Score=0', 'Cone up'), ('Flat - Score=2', 'Flat'), ('Cone down - Score=2', 'Cone down')], default='Cone up - Score=0', max_length=100, verbose_name='5b: Type of bottom')),
            ],
            options={
                'verbose_name': 'Type Of Bottom',
                'verbose_name_plural': 'Types Of Bottom',
            },
        ),
        migrations.CreateModel(
            name='TypeOfInterconnectingBottomPlateWelds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Butt welds - Score=0.1', 'Butt welds'), ('Double pass lap welds - Score=0', 'Double pass lap welds'), ('Single pass lap welds - Score=-0.1', 'Single pass lap welds')], default='Butt welds - Score=0.1', max_length=100, verbose_name='30: Type of interconnecting bottom plate welds outside of annular section')),
            ],
            options={
                'verbose_name': 'Type Of Interconnecting Bottom Plate Welds',
                'verbose_name_plural': 'Type Of Interconnecting Bottom Plate Welds',
            },
        ),
        migrations.CreateModel(
            name='VapourEmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('No or negligle harmful (toxic) release - Score=1', 'No or negligle harmful (toxic) release'), ('Small harmful (toxic) release - Score=2', 'Small harmful (toxic) release'), ('Large (>1000m3) harmful (toxic) release - Score=3', 'Large (>1000m3) harmful (toxic) release')], default='No or negligle harmful (toxic) release - Score=1', max_length=100, verbose_name='14b: Vapour emission')),
            ],
            options={
                'verbose_name': 'Vapour Emission',
                'verbose_name_plural': 'Vapour Emission',
            },
        ),
    ]
